
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/rnmapbox_maps_specs/Props.h>
#include <folly/dynamic.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

RNMBXAtmosphereProps::RNMBXAtmosphereProps(
    const PropsParserContext &context,
    const RNMBXAtmosphereProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXAtmosphereProps::getDiffPropsImplementationTarget() const {
  return "RNMBXAtmosphere";
}

folly::dynamic RNMBXAtmosphereProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXAtmosphereProps();
  const RNMBXAtmosphereProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXAtmosphereProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
  return result;
}
#endif
RNMBXBackgroundLayerProps::RNMBXBackgroundLayerProps(
    const PropsParserContext &context,
    const RNMBXBackgroundLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXBackgroundLayerProps::getDiffPropsImplementationTarget() const {
  return "RNMBXBackgroundLayer";
}

folly::dynamic RNMBXBackgroundLayerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXBackgroundLayerProps();
  const RNMBXBackgroundLayerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXBackgroundLayerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (sourceID != oldProps->sourceID) {
    result["sourceID"] = sourceID;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (filter != oldProps->filter) {
    result["filter"] = filter;
  }
    
  if (aboveLayerID != oldProps->aboveLayerID) {
    result["aboveLayerID"] = aboveLayerID;
  }
    
  if (belowLayerID != oldProps->belowLayerID) {
    result["belowLayerID"] = belowLayerID;
  }
    
  if (layerIndex != oldProps->layerIndex) {
    result["layerIndex"] = layerIndex;
  }
    
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
  return result;
}
#endif
RNMBXCalloutProps::RNMBXCalloutProps(
    const PropsParserContext &context,
    const RNMBXCalloutProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

     {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXCalloutProps::getDiffPropsImplementationTarget() const {
  return "RNMBXCallout";
}

folly::dynamic RNMBXCalloutProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXCalloutProps();
  const RNMBXCalloutProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXCalloutProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  return result;
}
#endif
RNMBXCameraProps::RNMBXCameraProps(
    const PropsParserContext &context,
    const RNMBXCameraProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    maxBounds(convertRawProp(context, rawProps, "maxBounds", sourceProps.maxBounds, {})),
    animationDuration(convertRawProp(context, rawProps, "animationDuration", sourceProps.animationDuration, {})),
    animationMode(convertRawProp(context, rawProps, "animationMode", sourceProps.animationMode, {})),
    defaultStop(convertRawProp(context, rawProps, "defaultStop", sourceProps.defaultStop, {})),
    userTrackingMode(convertRawProp(context, rawProps, "userTrackingMode", sourceProps.userTrackingMode, {})),
    followUserLocation(convertRawProp(context, rawProps, "followUserLocation", sourceProps.followUserLocation, {})),
    followUserMode(convertRawProp(context, rawProps, "followUserMode", sourceProps.followUserMode, {})),
    followZoomLevel(convertRawProp(context, rawProps, "followZoomLevel", sourceProps.followZoomLevel, {})),
    followPitch(convertRawProp(context, rawProps, "followPitch", sourceProps.followPitch, {})),
    followHeading(convertRawProp(context, rawProps, "followHeading", sourceProps.followHeading, {})),
    followPadding(convertRawProp(context, rawProps, "followPadding", sourceProps.followPadding, {})),
    zoomLevel(convertRawProp(context, rawProps, "zoomLevel", sourceProps.zoomLevel, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    stop(convertRawProp(context, rawProps, "stop", sourceProps.stop, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXCameraProps::getDiffPropsImplementationTarget() const {
  return "RNMBXCamera";
}

folly::dynamic RNMBXCameraProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXCameraProps();
  const RNMBXCameraProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXCameraProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (maxBounds != oldProps->maxBounds) {
    result["maxBounds"] = maxBounds;
  }
    
  if (animationDuration != oldProps->animationDuration) {
    result["animationDuration"] = animationDuration;
  }
    
  if (animationMode != oldProps->animationMode) {
    result["animationMode"] = animationMode;
  }
    
  if (defaultStop != oldProps->defaultStop) {
    result["defaultStop"] = defaultStop;
  }
    
  if (userTrackingMode != oldProps->userTrackingMode) {
    result["userTrackingMode"] = userTrackingMode;
  }
    
  if (followUserLocation != oldProps->followUserLocation) {
    result["followUserLocation"] = followUserLocation;
  }
    
  if (followUserMode != oldProps->followUserMode) {
    result["followUserMode"] = followUserMode;
  }
    
  if (followZoomLevel != oldProps->followZoomLevel) {
    result["followZoomLevel"] = followZoomLevel;
  }
    
  if (followPitch != oldProps->followPitch) {
    result["followPitch"] = followPitch;
  }
    
  if (followHeading != oldProps->followHeading) {
    result["followHeading"] = followHeading;
  }
    
  if (followPadding != oldProps->followPadding) {
    result["followPadding"] = followPadding;
  }
    
  if (zoomLevel != oldProps->zoomLevel) {
    result["zoomLevel"] = zoomLevel;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
    
  if (stop != oldProps->stop) {
    result["stop"] = stop;
  }
  return result;
}
#endif
RNMBXCircleLayerProps::RNMBXCircleLayerProps(
    const PropsParserContext &context,
    const RNMBXCircleLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXCircleLayerProps::getDiffPropsImplementationTarget() const {
  return "RNMBXCircleLayer";
}

folly::dynamic RNMBXCircleLayerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXCircleLayerProps();
  const RNMBXCircleLayerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXCircleLayerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (sourceID != oldProps->sourceID) {
    result["sourceID"] = sourceID;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (filter != oldProps->filter) {
    result["filter"] = filter;
  }
    
  if (aboveLayerID != oldProps->aboveLayerID) {
    result["aboveLayerID"] = aboveLayerID;
  }
    
  if (belowLayerID != oldProps->belowLayerID) {
    result["belowLayerID"] = belowLayerID;
  }
    
  if (layerIndex != oldProps->layerIndex) {
    result["layerIndex"] = layerIndex;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
    
  if (sourceLayerID != oldProps->sourceLayerID) {
    result["sourceLayerID"] = sourceLayerID;
  }
    
  if (slot != oldProps->slot) {
    result["slot"] = slot;
  }
    
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
  return result;
}
#endif
RNMBXCustomLocationProviderProps::RNMBXCustomLocationProviderProps(
    const PropsParserContext &context,
    const RNMBXCustomLocationProviderProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    coordinate(convertRawProp(context, rawProps, "coordinate", sourceProps.coordinate, {})),
    heading(convertRawProp(context, rawProps, "heading", sourceProps.heading, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXCustomLocationProviderProps::getDiffPropsImplementationTarget() const {
  return "RNMBXCustomLocationProvider";
}

folly::dynamic RNMBXCustomLocationProviderProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXCustomLocationProviderProps();
  const RNMBXCustomLocationProviderProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXCustomLocationProviderProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (coordinate != oldProps->coordinate) {
    result["coordinate"] = coordinate;
  }
    
  if (heading != oldProps->heading) {
    result["heading"] = heading;
  }
  return result;
}
#endif
RNMBXFillExtrusionLayerProps::RNMBXFillExtrusionLayerProps(
    const PropsParserContext &context,
    const RNMBXFillExtrusionLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXFillExtrusionLayerProps::getDiffPropsImplementationTarget() const {
  return "RNMBXFillExtrusionLayer";
}

folly::dynamic RNMBXFillExtrusionLayerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXFillExtrusionLayerProps();
  const RNMBXFillExtrusionLayerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXFillExtrusionLayerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (sourceID != oldProps->sourceID) {
    result["sourceID"] = sourceID;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (filter != oldProps->filter) {
    result["filter"] = filter;
  }
    
  if (aboveLayerID != oldProps->aboveLayerID) {
    result["aboveLayerID"] = aboveLayerID;
  }
    
  if (belowLayerID != oldProps->belowLayerID) {
    result["belowLayerID"] = belowLayerID;
  }
    
  if (layerIndex != oldProps->layerIndex) {
    result["layerIndex"] = layerIndex;
  }
    
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
    
  if (sourceLayerID != oldProps->sourceLayerID) {
    result["sourceLayerID"] = sourceLayerID;
  }
  return result;
}
#endif
RNMBXFillLayerProps::RNMBXFillLayerProps(
    const PropsParserContext &context,
    const RNMBXFillLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXFillLayerProps::getDiffPropsImplementationTarget() const {
  return "RNMBXFillLayer";
}

folly::dynamic RNMBXFillLayerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXFillLayerProps();
  const RNMBXFillLayerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXFillLayerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (sourceID != oldProps->sourceID) {
    result["sourceID"] = sourceID;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (filter != oldProps->filter) {
    result["filter"] = filter;
  }
    
  if (aboveLayerID != oldProps->aboveLayerID) {
    result["aboveLayerID"] = aboveLayerID;
  }
    
  if (belowLayerID != oldProps->belowLayerID) {
    result["belowLayerID"] = belowLayerID;
  }
    
  if (layerIndex != oldProps->layerIndex) {
    result["layerIndex"] = layerIndex;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
    
  if (sourceLayerID != oldProps->sourceLayerID) {
    result["sourceLayerID"] = sourceLayerID;
  }
    
  if (slot != oldProps->slot) {
    result["slot"] = slot;
  }
    
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
  return result;
}
#endif
RNMBXHeatmapLayerProps::RNMBXHeatmapLayerProps(
    const PropsParserContext &context,
    const RNMBXHeatmapLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXHeatmapLayerProps::getDiffPropsImplementationTarget() const {
  return "RNMBXHeatmapLayer";
}

folly::dynamic RNMBXHeatmapLayerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXHeatmapLayerProps();
  const RNMBXHeatmapLayerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXHeatmapLayerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (sourceID != oldProps->sourceID) {
    result["sourceID"] = sourceID;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (filter != oldProps->filter) {
    result["filter"] = filter;
  }
    
  if (aboveLayerID != oldProps->aboveLayerID) {
    result["aboveLayerID"] = aboveLayerID;
  }
    
  if (belowLayerID != oldProps->belowLayerID) {
    result["belowLayerID"] = belowLayerID;
  }
    
  if (layerIndex != oldProps->layerIndex) {
    result["layerIndex"] = layerIndex;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
    
  if (sourceLayerID != oldProps->sourceLayerID) {
    result["sourceLayerID"] = sourceLayerID;
  }
    
  if (slot != oldProps->slot) {
    result["slot"] = slot;
  }
    
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
  return result;
}
#endif
RNMBXImageProps::RNMBXImageProps(
    const PropsParserContext &context,
    const RNMBXImageProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    stretchX(convertRawProp(context, rawProps, "stretchX", sourceProps.stretchX, {})),
    stretchY(convertRawProp(context, rawProps, "stretchY", sourceProps.stretchY, {})),
    content(convertRawProp(context, rawProps, "content", sourceProps.content, {})),
    sdf(convertRawProp(context, rawProps, "sdf", sourceProps.sdf, {})),
    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
    scale(convertRawProp(context, rawProps, "scale", sourceProps.scale, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXImageProps::getDiffPropsImplementationTarget() const {
  return "RNMBXImage";
}

folly::dynamic RNMBXImageProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXImageProps();
  const RNMBXImageProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXImageProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (stretchX != oldProps->stretchX) {
    result["stretchX"] = stretchX;
  }
    
  if (stretchY != oldProps->stretchY) {
    result["stretchY"] = stretchY;
  }
    
  if (content != oldProps->content) {
    result["content"] = content;
  }
    
  if (sdf != oldProps->sdf) {
    result["sdf"] = sdf;
  }
    
  if (name != oldProps->name) {
    result["name"] = name;
  }
    
  if (scale != oldProps->scale) {
    result["scale"] = scale;
  }
  return result;
}
#endif
RNMBXImagesProps::RNMBXImagesProps(
    const PropsParserContext &context,
    const RNMBXImagesProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    images(convertRawProp(context, rawProps, "images", sourceProps.images, {})),
    nativeImages(convertRawProp(context, rawProps, "nativeImages", sourceProps.nativeImages, {})),
    hasOnImageMissing(convertRawProp(context, rawProps, "hasOnImageMissing", sourceProps.hasOnImageMissing, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXImagesProps::getDiffPropsImplementationTarget() const {
  return "RNMBXImages";
}

folly::dynamic RNMBXImagesProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXImagesProps();
  const RNMBXImagesProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXImagesProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (images != oldProps->images) {
    result["images"] = images;
  }
    
  if (nativeImages != oldProps->nativeImages) {
    result["nativeImages"] = nativeImages;
  }
    
  if (hasOnImageMissing != oldProps->hasOnImageMissing) {
    result["hasOnImageMissing"] = hasOnImageMissing;
  }
  return result;
}
#endif
RNMBXImageSourceProps::RNMBXImageSourceProps(
    const PropsParserContext &context,
    const RNMBXImageSourceProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    url(convertRawProp(context, rawProps, "url", sourceProps.url, {})),
    coordinates(convertRawProp(context, rawProps, "coordinates", sourceProps.coordinates, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXImageSourceProps::getDiffPropsImplementationTarget() const {
  return "RNMBXImageSource";
}

folly::dynamic RNMBXImageSourceProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXImageSourceProps();
  const RNMBXImageSourceProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXImageSourceProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (url != oldProps->url) {
    result["url"] = url;
  }
    
  if (coordinates != oldProps->coordinates) {
    result["coordinates"] = coordinates;
  }
  return result;
}
#endif
RNMBXLightProps::RNMBXLightProps(
    const PropsParserContext &context,
    const RNMBXLightProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXLightProps::getDiffPropsImplementationTarget() const {
  return "RNMBXLight";
}

folly::dynamic RNMBXLightProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXLightProps();
  const RNMBXLightProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXLightProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
  return result;
}
#endif
RNMBXLineLayerProps::RNMBXLineLayerProps(
    const PropsParserContext &context,
    const RNMBXLineLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXLineLayerProps::getDiffPropsImplementationTarget() const {
  return "RNMBXLineLayer";
}

folly::dynamic RNMBXLineLayerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXLineLayerProps();
  const RNMBXLineLayerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXLineLayerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (sourceID != oldProps->sourceID) {
    result["sourceID"] = sourceID;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (filter != oldProps->filter) {
    result["filter"] = filter;
  }
    
  if (aboveLayerID != oldProps->aboveLayerID) {
    result["aboveLayerID"] = aboveLayerID;
  }
    
  if (belowLayerID != oldProps->belowLayerID) {
    result["belowLayerID"] = belowLayerID;
  }
    
  if (layerIndex != oldProps->layerIndex) {
    result["layerIndex"] = layerIndex;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
    
  if (sourceLayerID != oldProps->sourceLayerID) {
    result["sourceLayerID"] = sourceLayerID;
  }
    
  if (slot != oldProps->slot) {
    result["slot"] = slot;
  }
    
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
  return result;
}
#endif
RNMBXMapViewProps::RNMBXMapViewProps(
    const PropsParserContext &context,
    const RNMBXMapViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    attributionEnabled(convertRawProp(context, rawProps, "attributionEnabled", sourceProps.attributionEnabled, {})),
    attributionPosition(convertRawProp(context, rawProps, "attributionPosition", sourceProps.attributionPosition, {})),
    logoEnabled(convertRawProp(context, rawProps, "logoEnabled", sourceProps.logoEnabled, {})),
    logoPosition(convertRawProp(context, rawProps, "logoPosition", sourceProps.logoPosition, {})),
    compassEnabled(convertRawProp(context, rawProps, "compassEnabled", sourceProps.compassEnabled, {})),
    compassFadeWhenNorth(convertRawProp(context, rawProps, "compassFadeWhenNorth", sourceProps.compassFadeWhenNorth, {})),
    compassPosition(convertRawProp(context, rawProps, "compassPosition", sourceProps.compassPosition, {})),
    compassViewPosition(convertRawProp(context, rawProps, "compassViewPosition", sourceProps.compassViewPosition, {})),
    compassViewMargins(convertRawProp(context, rawProps, "compassViewMargins", sourceProps.compassViewMargins, {})),
    scaleBarEnabled(convertRawProp(context, rawProps, "scaleBarEnabled", sourceProps.scaleBarEnabled, {})),
    scaleBarPosition(convertRawProp(context, rawProps, "scaleBarPosition", sourceProps.scaleBarPosition, {})),
    zoomEnabled(convertRawProp(context, rawProps, "zoomEnabled", sourceProps.zoomEnabled, {})),
    scrollEnabled(convertRawProp(context, rawProps, "scrollEnabled", sourceProps.scrollEnabled, {})),
    rotateEnabled(convertRawProp(context, rawProps, "rotateEnabled", sourceProps.rotateEnabled, {})),
    pitchEnabled(convertRawProp(context, rawProps, "pitchEnabled", sourceProps.pitchEnabled, {})),
    deselectAnnotationOnTap(convertRawProp(context, rawProps, "deselectAnnotationOnTap", sourceProps.deselectAnnotationOnTap, {})),
    requestDisallowInterceptTouchEvent(convertRawProp(context, rawProps, "requestDisallowInterceptTouchEvent", sourceProps.requestDisallowInterceptTouchEvent, {})),
    projection(convertRawProp(context, rawProps, "projection", sourceProps.projection, {})),
    localizeLabels(convertRawProp(context, rawProps, "localizeLabels", sourceProps.localizeLabels, {})),
    styleURL(convertRawProp(context, rawProps, "styleURL", sourceProps.styleURL, {})),
    gestureSettings(convertRawProp(context, rawProps, "gestureSettings", sourceProps.gestureSettings, {})),
    surfaceView(convertRawProp(context, rawProps, "surfaceView", sourceProps.surfaceView, {})),
    scaleBarViewMargins(convertRawProp(context, rawProps, "scaleBarViewMargins", sourceProps.scaleBarViewMargins, {})),
    attributionViewMargins(convertRawProp(context, rawProps, "attributionViewMargins", sourceProps.attributionViewMargins, {})),
    attributionViewPosition(convertRawProp(context, rawProps, "attributionViewPosition", sourceProps.attributionViewPosition, {})),
    compassImage(convertRawProp(context, rawProps, "compassImage", sourceProps.compassImage, {})),
    mapViewImpl(convertRawProp(context, rawProps, "mapViewImpl", sourceProps.mapViewImpl, {})),
    preferredFramesPerSecond(convertRawProp(context, rawProps, "preferredFramesPerSecond", sourceProps.preferredFramesPerSecond, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXMapViewProps::getDiffPropsImplementationTarget() const {
  return "RNMBXMapView";
}

folly::dynamic RNMBXMapViewProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXMapViewProps();
  const RNMBXMapViewProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXMapViewProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (attributionEnabled != oldProps->attributionEnabled) {
    result["attributionEnabled"] = attributionEnabled;
  }
    
  if (attributionPosition != oldProps->attributionPosition) {
    result["attributionPosition"] = attributionPosition;
  }
    
  if (logoEnabled != oldProps->logoEnabled) {
    result["logoEnabled"] = logoEnabled;
  }
    
  if (logoPosition != oldProps->logoPosition) {
    result["logoPosition"] = logoPosition;
  }
    
  if (compassEnabled != oldProps->compassEnabled) {
    result["compassEnabled"] = compassEnabled;
  }
    
  if (compassFadeWhenNorth != oldProps->compassFadeWhenNorth) {
    result["compassFadeWhenNorth"] = compassFadeWhenNorth;
  }
    
  if (compassPosition != oldProps->compassPosition) {
    result["compassPosition"] = compassPosition;
  }
    
  if (compassViewPosition != oldProps->compassViewPosition) {
    result["compassViewPosition"] = compassViewPosition;
  }
    
  if (compassViewMargins != oldProps->compassViewMargins) {
    result["compassViewMargins"] = compassViewMargins;
  }
    
  if (scaleBarEnabled != oldProps->scaleBarEnabled) {
    result["scaleBarEnabled"] = scaleBarEnabled;
  }
    
  if (scaleBarPosition != oldProps->scaleBarPosition) {
    result["scaleBarPosition"] = scaleBarPosition;
  }
    
  if (zoomEnabled != oldProps->zoomEnabled) {
    result["zoomEnabled"] = zoomEnabled;
  }
    
  if (scrollEnabled != oldProps->scrollEnabled) {
    result["scrollEnabled"] = scrollEnabled;
  }
    
  if (rotateEnabled != oldProps->rotateEnabled) {
    result["rotateEnabled"] = rotateEnabled;
  }
    
  if (pitchEnabled != oldProps->pitchEnabled) {
    result["pitchEnabled"] = pitchEnabled;
  }
    
  if (deselectAnnotationOnTap != oldProps->deselectAnnotationOnTap) {
    result["deselectAnnotationOnTap"] = deselectAnnotationOnTap;
  }
    
  if (requestDisallowInterceptTouchEvent != oldProps->requestDisallowInterceptTouchEvent) {
    result["requestDisallowInterceptTouchEvent"] = requestDisallowInterceptTouchEvent;
  }
    
  if (projection != oldProps->projection) {
    result["projection"] = projection;
  }
    
  if (localizeLabels != oldProps->localizeLabels) {
    result["localizeLabels"] = localizeLabels;
  }
    
  if (styleURL != oldProps->styleURL) {
    result["styleURL"] = styleURL;
  }
    
  if (gestureSettings != oldProps->gestureSettings) {
    result["gestureSettings"] = gestureSettings;
  }
    
  if (surfaceView != oldProps->surfaceView) {
    result["surfaceView"] = surfaceView;
  }
    
  if (scaleBarViewMargins != oldProps->scaleBarViewMargins) {
    result["scaleBarViewMargins"] = scaleBarViewMargins;
  }
    
  if (attributionViewMargins != oldProps->attributionViewMargins) {
    result["attributionViewMargins"] = attributionViewMargins;
  }
    
  if (attributionViewPosition != oldProps->attributionViewPosition) {
    result["attributionViewPosition"] = attributionViewPosition;
  }
    
  if (compassImage != oldProps->compassImage) {
    result["compassImage"] = compassImage;
  }
    
  if (mapViewImpl != oldProps->mapViewImpl) {
    result["mapViewImpl"] = mapViewImpl;
  }
    
  if (preferredFramesPerSecond != oldProps->preferredFramesPerSecond) {
    result["preferredFramesPerSecond"] = preferredFramesPerSecond;
  }
  return result;
}
#endif
RNMBXMarkerViewContentProps::RNMBXMarkerViewContentProps(
    const PropsParserContext &context,
    const RNMBXMarkerViewContentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

     {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXMarkerViewContentProps::getDiffPropsImplementationTarget() const {
  return "RNMBXMarkerViewContent";
}

folly::dynamic RNMBXMarkerViewContentProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXMarkerViewContentProps();
  const RNMBXMarkerViewContentProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXMarkerViewContentProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  return result;
}
#endif
RNMBXMarkerViewProps::RNMBXMarkerViewProps(
    const PropsParserContext &context,
    const RNMBXMarkerViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    coordinate(convertRawProp(context, rawProps, "coordinate", sourceProps.coordinate, {})),
    anchor(convertRawProp(context, rawProps, "anchor", sourceProps.anchor, {})),
    allowOverlap(convertRawProp(context, rawProps, "allowOverlap", sourceProps.allowOverlap, {})),
    allowOverlapWithPuck(convertRawProp(context, rawProps, "allowOverlapWithPuck", sourceProps.allowOverlapWithPuck, {})),
    isSelected(convertRawProp(context, rawProps, "isSelected", sourceProps.isSelected, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXMarkerViewProps::getDiffPropsImplementationTarget() const {
  return "RNMBXMarkerView";
}

folly::dynamic RNMBXMarkerViewProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXMarkerViewProps();
  const RNMBXMarkerViewProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXMarkerViewProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (coordinate != oldProps->coordinate) {
    result["coordinate"] = coordinate;
  }
    
  if (anchor != oldProps->anchor) {
    result["anchor"] = anchor;
  }
    
  if (allowOverlap != oldProps->allowOverlap) {
    result["allowOverlap"] = allowOverlap;
  }
    
  if (allowOverlapWithPuck != oldProps->allowOverlapWithPuck) {
    result["allowOverlapWithPuck"] = allowOverlapWithPuck;
  }
    
  if (isSelected != oldProps->isSelected) {
    result["isSelected"] = isSelected;
  }
  return result;
}
#endif
RNMBXModelLayerProps::RNMBXModelLayerProps(
    const PropsParserContext &context,
    const RNMBXModelLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXModelLayerProps::getDiffPropsImplementationTarget() const {
  return "RNMBXModelLayer";
}

folly::dynamic RNMBXModelLayerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXModelLayerProps();
  const RNMBXModelLayerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXModelLayerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (sourceID != oldProps->sourceID) {
    result["sourceID"] = sourceID;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (filter != oldProps->filter) {
    result["filter"] = filter;
  }
    
  if (aboveLayerID != oldProps->aboveLayerID) {
    result["aboveLayerID"] = aboveLayerID;
  }
    
  if (belowLayerID != oldProps->belowLayerID) {
    result["belowLayerID"] = belowLayerID;
  }
    
  if (layerIndex != oldProps->layerIndex) {
    result["layerIndex"] = layerIndex;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
    
  if (sourceLayerID != oldProps->sourceLayerID) {
    result["sourceLayerID"] = sourceLayerID;
  }
    
  if (slot != oldProps->slot) {
    result["slot"] = slot;
  }
    
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
  return result;
}
#endif
RNMBXModelsProps::RNMBXModelsProps(
    const PropsParserContext &context,
    const RNMBXModelsProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    models(convertRawProp(context, rawProps, "models", sourceProps.models, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXModelsProps::getDiffPropsImplementationTarget() const {
  return "RNMBXModels";
}

folly::dynamic RNMBXModelsProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXModelsProps();
  const RNMBXModelsProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXModelsProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (models != oldProps->models) {
    result["models"] = models;
  }
  return result;
}
#endif
RNMBXNativeUserLocationProps::RNMBXNativeUserLocationProps(
    const PropsParserContext &context,
    const RNMBXNativeUserLocationProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    androidRenderMode(convertRawProp(context, rawProps, "androidRenderMode", sourceProps.androidRenderMode, {})),
    puckBearing(convertRawProp(context, rawProps, "puckBearing", sourceProps.puckBearing, {})),
    puckBearingEnabled(convertRawProp(context, rawProps, "puckBearingEnabled", sourceProps.puckBearingEnabled, {})),
    bearingImage(convertRawProp(context, rawProps, "bearingImage", sourceProps.bearingImage, {})),
    shadowImage(convertRawProp(context, rawProps, "shadowImage", sourceProps.shadowImage, {})),
    topImage(convertRawProp(context, rawProps, "topImage", sourceProps.topImage, {})),
    scale(convertRawProp(context, rawProps, "scale", sourceProps.scale, {})),
    visible(convertRawProp(context, rawProps, "visible", sourceProps.visible, {false})),
    pulsing(convertRawProp(context, rawProps, "pulsing", sourceProps.pulsing, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXNativeUserLocationProps::getDiffPropsImplementationTarget() const {
  return "RNMBXNativeUserLocation";
}

folly::dynamic RNMBXNativeUserLocationProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXNativeUserLocationProps();
  const RNMBXNativeUserLocationProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXNativeUserLocationProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (androidRenderMode != oldProps->androidRenderMode) {
    result["androidRenderMode"] = androidRenderMode;
  }
    
  if (puckBearing != oldProps->puckBearing) {
    result["puckBearing"] = puckBearing;
  }
    
  if (puckBearingEnabled != oldProps->puckBearingEnabled) {
    result["puckBearingEnabled"] = puckBearingEnabled;
  }
    
  if (bearingImage != oldProps->bearingImage) {
    result["bearingImage"] = bearingImage;
  }
    
  if (shadowImage != oldProps->shadowImage) {
    result["shadowImage"] = shadowImage;
  }
    
  if (topImage != oldProps->topImage) {
    result["topImage"] = topImage;
  }
    
  if (scale != oldProps->scale) {
    result["scale"] = scale;
  }
    
  if (visible != oldProps->visible) {
    result["visible"] = visible;
  }
    
  if (pulsing != oldProps->pulsing) {
    result["pulsing"] = pulsing;
  }
  return result;
}
#endif
RNMBXPointAnnotationProps::RNMBXPointAnnotationProps(
    const PropsParserContext &context,
    const RNMBXPointAnnotationProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    coordinate(convertRawProp(context, rawProps, "coordinate", sourceProps.coordinate, {})),
    draggable(convertRawProp(context, rawProps, "draggable", sourceProps.draggable, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    anchor(convertRawProp(context, rawProps, "anchor", sourceProps.anchor, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXPointAnnotationProps::getDiffPropsImplementationTarget() const {
  return "RNMBXPointAnnotation";
}

folly::dynamic RNMBXPointAnnotationProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXPointAnnotationProps();
  const RNMBXPointAnnotationProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXPointAnnotationProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (coordinate != oldProps->coordinate) {
    result["coordinate"] = coordinate;
  }
    
  if (draggable != oldProps->draggable) {
    result["draggable"] = draggable;
  }
    
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (anchor != oldProps->anchor) {
    result["anchor"] = anchor;
  }
  return result;
}
#endif
RNMBXRasterDemSourceProps::RNMBXRasterDemSourceProps(
    const PropsParserContext &context,
    const RNMBXRasterDemSourceProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    url(convertRawProp(context, rawProps, "url", sourceProps.url, {})),
    tileUrlTemplates(convertRawProp(context, rawProps, "tileUrlTemplates", sourceProps.tileUrlTemplates, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    tileSize(convertRawProp(context, rawProps, "tileSize", sourceProps.tileSize, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXRasterDemSourceProps::getDiffPropsImplementationTarget() const {
  return "RNMBXRasterDemSource";
}

folly::dynamic RNMBXRasterDemSourceProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXRasterDemSourceProps();
  const RNMBXRasterDemSourceProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXRasterDemSourceProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (url != oldProps->url) {
    result["url"] = url;
  }
    
  if (tileUrlTemplates != oldProps->tileUrlTemplates) {
    result["tileUrlTemplates"] = tileUrlTemplates;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (tileSize != oldProps->tileSize) {
    result["tileSize"] = tileSize;
  }
  return result;
}
#endif
RNMBXRasterLayerProps::RNMBXRasterLayerProps(
    const PropsParserContext &context,
    const RNMBXRasterLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXRasterLayerProps::getDiffPropsImplementationTarget() const {
  return "RNMBXRasterLayer";
}

folly::dynamic RNMBXRasterLayerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXRasterLayerProps();
  const RNMBXRasterLayerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXRasterLayerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (sourceID != oldProps->sourceID) {
    result["sourceID"] = sourceID;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (filter != oldProps->filter) {
    result["filter"] = filter;
  }
    
  if (aboveLayerID != oldProps->aboveLayerID) {
    result["aboveLayerID"] = aboveLayerID;
  }
    
  if (belowLayerID != oldProps->belowLayerID) {
    result["belowLayerID"] = belowLayerID;
  }
    
  if (layerIndex != oldProps->layerIndex) {
    result["layerIndex"] = layerIndex;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
    
  if (sourceLayerID != oldProps->sourceLayerID) {
    result["sourceLayerID"] = sourceLayerID;
  }
    
  if (slot != oldProps->slot) {
    result["slot"] = slot;
  }
    
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
  return result;
}
#endif
RNMBXRasterSourceProps::RNMBXRasterSourceProps(
    const PropsParserContext &context,
    const RNMBXRasterSourceProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    url(convertRawProp(context, rawProps, "url", sourceProps.url, {})),
    tileUrlTemplates(convertRawProp(context, rawProps, "tileUrlTemplates", sourceProps.tileUrlTemplates, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    tileSize(convertRawProp(context, rawProps, "tileSize", sourceProps.tileSize, {})),
    tms(convertRawProp(context, rawProps, "tms", sourceProps.tms, {})),
    attribution(convertRawProp(context, rawProps, "attribution", sourceProps.attribution, {})),
    sourceBounds(convertRawProp(context, rawProps, "sourceBounds", sourceProps.sourceBounds, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXRasterSourceProps::getDiffPropsImplementationTarget() const {
  return "RNMBXRasterSource";
}

folly::dynamic RNMBXRasterSourceProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXRasterSourceProps();
  const RNMBXRasterSourceProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXRasterSourceProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (url != oldProps->url) {
    result["url"] = url;
  }
    
  if (tileUrlTemplates != oldProps->tileUrlTemplates) {
    result["tileUrlTemplates"] = tileUrlTemplates;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (tileSize != oldProps->tileSize) {
    result["tileSize"] = tileSize;
  }
    
  if (tms != oldProps->tms) {
    result["tms"] = tms;
  }
    
  if (attribution != oldProps->attribution) {
    result["attribution"] = attribution;
  }
    
  if (sourceBounds != oldProps->sourceBounds) {
    result["sourceBounds"] = sourceBounds;
  }
  return result;
}
#endif
RNMBXShapeSourceProps::RNMBXShapeSourceProps(
    const PropsParserContext &context,
    const RNMBXShapeSourceProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    url(convertRawProp(context, rawProps, "url", sourceProps.url, {})),
    shape(convertRawProp(context, rawProps, "shape", sourceProps.shape, {})),
    cluster(convertRawProp(context, rawProps, "cluster", sourceProps.cluster, {})),
    clusterRadius(convertRawProp(context, rawProps, "clusterRadius", sourceProps.clusterRadius, {})),
    clusterMaxZoomLevel(convertRawProp(context, rawProps, "clusterMaxZoomLevel", sourceProps.clusterMaxZoomLevel, {})),
    clusterProperties(convertRawProp(context, rawProps, "clusterProperties", sourceProps.clusterProperties, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    buffer(convertRawProp(context, rawProps, "buffer", sourceProps.buffer, {})),
    tolerance(convertRawProp(context, rawProps, "tolerance", sourceProps.tolerance, {})),
    lineMetrics(convertRawProp(context, rawProps, "lineMetrics", sourceProps.lineMetrics, {})),
    hasPressListener(convertRawProp(context, rawProps, "hasPressListener", sourceProps.hasPressListener, {})),
    hitbox(convertRawProp(context, rawProps, "hitbox", sourceProps.hitbox, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXShapeSourceProps::getDiffPropsImplementationTarget() const {
  return "RNMBXShapeSource";
}

folly::dynamic RNMBXShapeSourceProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXShapeSourceProps();
  const RNMBXShapeSourceProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXShapeSourceProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (url != oldProps->url) {
    result["url"] = url;
  }
    
  if (shape != oldProps->shape) {
    result["shape"] = shape;
  }
    
  if (cluster != oldProps->cluster) {
    result["cluster"] = cluster;
  }
    
  if (clusterRadius != oldProps->clusterRadius) {
    result["clusterRadius"] = clusterRadius;
  }
    
  if (clusterMaxZoomLevel != oldProps->clusterMaxZoomLevel) {
    result["clusterMaxZoomLevel"] = clusterMaxZoomLevel;
  }
    
  if (clusterProperties != oldProps->clusterProperties) {
    result["clusterProperties"] = clusterProperties;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (buffer != oldProps->buffer) {
    result["buffer"] = buffer;
  }
    
  if (tolerance != oldProps->tolerance) {
    result["tolerance"] = tolerance;
  }
    
  if (lineMetrics != oldProps->lineMetrics) {
    result["lineMetrics"] = lineMetrics;
  }
    
  if (hasPressListener != oldProps->hasPressListener) {
    result["hasPressListener"] = hasPressListener;
  }
    
  if (hitbox != oldProps->hitbox) {
    result["hitbox"] = hitbox;
  }
  return result;
}
#endif
RNMBXSkyLayerProps::RNMBXSkyLayerProps(
    const PropsParserContext &context,
    const RNMBXSkyLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXSkyLayerProps::getDiffPropsImplementationTarget() const {
  return "RNMBXSkyLayer";
}

folly::dynamic RNMBXSkyLayerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXSkyLayerProps();
  const RNMBXSkyLayerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXSkyLayerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (sourceID != oldProps->sourceID) {
    result["sourceID"] = sourceID;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (filter != oldProps->filter) {
    result["filter"] = filter;
  }
    
  if (aboveLayerID != oldProps->aboveLayerID) {
    result["aboveLayerID"] = aboveLayerID;
  }
    
  if (belowLayerID != oldProps->belowLayerID) {
    result["belowLayerID"] = belowLayerID;
  }
    
  if (layerIndex != oldProps->layerIndex) {
    result["layerIndex"] = layerIndex;
  }
    
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
  return result;
}
#endif
RNMBXStyleImportProps::RNMBXStyleImportProps(
    const PropsParserContext &context,
    const RNMBXStyleImportProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {false})),
    config(convertRawProp(context, rawProps, "config", sourceProps.config, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXStyleImportProps::getDiffPropsImplementationTarget() const {
  return "RNMBXStyleImport";
}

folly::dynamic RNMBXStyleImportProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXStyleImportProps();
  const RNMBXStyleImportProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXStyleImportProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (config != oldProps->config) {
    result["config"] = config;
  }
  return result;
}
#endif
RNMBXSymbolLayerProps::RNMBXSymbolLayerProps(
    const PropsParserContext &context,
    const RNMBXSymbolLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXSymbolLayerProps::getDiffPropsImplementationTarget() const {
  return "RNMBXSymbolLayer";
}

folly::dynamic RNMBXSymbolLayerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXSymbolLayerProps();
  const RNMBXSymbolLayerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXSymbolLayerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (sourceID != oldProps->sourceID) {
    result["sourceID"] = sourceID;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (filter != oldProps->filter) {
    result["filter"] = filter;
  }
    
  if (aboveLayerID != oldProps->aboveLayerID) {
    result["aboveLayerID"] = aboveLayerID;
  }
    
  if (belowLayerID != oldProps->belowLayerID) {
    result["belowLayerID"] = belowLayerID;
  }
    
  if (layerIndex != oldProps->layerIndex) {
    result["layerIndex"] = layerIndex;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
    
  if (sourceLayerID != oldProps->sourceLayerID) {
    result["sourceLayerID"] = sourceLayerID;
  }
    
  if (slot != oldProps->slot) {
    result["slot"] = slot;
  }
    
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
  return result;
}
#endif
RNMBXTerrainProps::RNMBXTerrainProps(
    const PropsParserContext &context,
    const RNMBXTerrainProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXTerrainProps::getDiffPropsImplementationTarget() const {
  return "RNMBXTerrain";
}

folly::dynamic RNMBXTerrainProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXTerrainProps();
  const RNMBXTerrainProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXTerrainProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (sourceID != oldProps->sourceID) {
    result["sourceID"] = sourceID;
  }
    
  if (reactStyle != oldProps->reactStyle) {
    result["reactStyle"] = reactStyle;
  }
  return result;
}
#endif
RNMBXVectorSourceProps::RNMBXVectorSourceProps(
    const PropsParserContext &context,
    const RNMBXVectorSourceProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    url(convertRawProp(context, rawProps, "url", sourceProps.url, {})),
    tileUrlTemplates(convertRawProp(context, rawProps, "tileUrlTemplates", sourceProps.tileUrlTemplates, {})),
    attribution(convertRawProp(context, rawProps, "attribution", sourceProps.attribution, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    tms(convertRawProp(context, rawProps, "tms", sourceProps.tms, {})),
    hasPressListener(convertRawProp(context, rawProps, "hasPressListener", sourceProps.hasPressListener, {})),
    hitbox(convertRawProp(context, rawProps, "hitbox", sourceProps.hitbox, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXVectorSourceProps::getDiffPropsImplementationTarget() const {
  return "RNMBXVectorSource";
}

folly::dynamic RNMBXVectorSourceProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXVectorSourceProps();
  const RNMBXVectorSourceProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXVectorSourceProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (id != oldProps->id) {
    result["id"] = id;
  }
    
  if (existing != oldProps->existing) {
    result["existing"] = existing;
  }
    
  if (url != oldProps->url) {
    result["url"] = url;
  }
    
  if (tileUrlTemplates != oldProps->tileUrlTemplates) {
    result["tileUrlTemplates"] = tileUrlTemplates;
  }
    
  if (attribution != oldProps->attribution) {
    result["attribution"] = attribution;
  }
    
  if (maxZoomLevel != oldProps->maxZoomLevel) {
    result["maxZoomLevel"] = maxZoomLevel;
  }
    
  if (minZoomLevel != oldProps->minZoomLevel) {
    result["minZoomLevel"] = minZoomLevel;
  }
    
  if (tms != oldProps->tms) {
    result["tms"] = tms;
  }
    
  if (hasPressListener != oldProps->hasPressListener) {
    result["hasPressListener"] = hasPressListener;
  }
    
  if (hitbox != oldProps->hitbox) {
    result["hitbox"] = hitbox;
  }
  return result;
}
#endif
RNMBXViewportProps::RNMBXViewportProps(
    const PropsParserContext &context,
    const RNMBXViewportProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    transitionsToIdleUponUserInteraction(convertRawProp(context, rawProps, "transitionsToIdleUponUserInteraction", sourceProps.transitionsToIdleUponUserInteraction, {})),
    hasStatusChanged(convertRawProp(context, rawProps, "hasStatusChanged", sourceProps.hasStatusChanged, {false})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNMBXViewportProps::getDiffPropsImplementationTarget() const {
  return "RNMBXViewport";
}

folly::dynamic RNMBXViewportProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNMBXViewportProps();
  const RNMBXViewportProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNMBXViewportProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (transitionsToIdleUponUserInteraction != oldProps->transitionsToIdleUponUserInteraction) {
    result["transitionsToIdleUponUserInteraction"] = transitionsToIdleUponUserInteraction;
  }
    
  if (hasStatusChanged != oldProps->hasStatusChanged) {
    result["hasStatusChanged"] = hasStatusChanged;
  }
  return result;
}
#endif

} // namespace facebook::react
