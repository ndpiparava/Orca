
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/lottiereactnative/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

LottieAnimationViewProps::LottieAnimationViewProps(
    const PropsParserContext &context,
    const LottieAnimationViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    resizeMode(convertRawProp(context, rawProps, "resizeMode", sourceProps.resizeMode, {})),
    renderMode(convertRawProp(context, rawProps, "renderMode", sourceProps.renderMode, {})),
    sourceName(convertRawProp(context, rawProps, "sourceName", sourceProps.sourceName, {})),
    sourceJson(convertRawProp(context, rawProps, "sourceJson", sourceProps.sourceJson, {})),
    sourceURL(convertRawProp(context, rawProps, "sourceURL", sourceProps.sourceURL, {})),
    sourceDotLottieURI(convertRawProp(context, rawProps, "sourceDotLottieURI", sourceProps.sourceDotLottieURI, {})),
    imageAssetsFolder(convertRawProp(context, rawProps, "imageAssetsFolder", sourceProps.imageAssetsFolder, {})),
    progress(convertRawProp(context, rawProps, "progress", sourceProps.progress, {0.0})),
    speed(convertRawProp(context, rawProps, "speed", sourceProps.speed, {0.0})),
    loop(convertRawProp(context, rawProps, "loop", sourceProps.loop, {false})),
    autoPlay(convertRawProp(context, rawProps, "autoPlay", sourceProps.autoPlay, {false})),
    enableMergePathsAndroidForKitKatAndAbove(convertRawProp(context, rawProps, "enableMergePathsAndroidForKitKatAndAbove", sourceProps.enableMergePathsAndroidForKitKatAndAbove, {false})),
    enableSafeModeAndroid(convertRawProp(context, rawProps, "enableSafeModeAndroid", sourceProps.enableSafeModeAndroid, {false})),
    hardwareAccelerationAndroid(convertRawProp(context, rawProps, "hardwareAccelerationAndroid", sourceProps.hardwareAccelerationAndroid, {false})),
    cacheComposition(convertRawProp(context, rawProps, "cacheComposition", sourceProps.cacheComposition, {false})),
    colorFilters(convertRawProp(context, rawProps, "colorFilters", sourceProps.colorFilters, {})),
    dummy(convertRawProp(context, rawProps, "dummy", sourceProps.dummy, {})),
    textFiltersAndroid(convertRawProp(context, rawProps, "textFiltersAndroid", sourceProps.textFiltersAndroid, {})),
    textFiltersIOS(convertRawProp(context, rawProps, "textFiltersIOS", sourceProps.textFiltersIOS, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName LottieAnimationViewProps::getDiffPropsImplementationTarget() const {
  return "LottieAnimationView";
}

folly::dynamic LottieAnimationViewProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = LottieAnimationViewProps();
  const LottieAnimationViewProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const LottieAnimationViewProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (resizeMode != oldProps->resizeMode) {
    result["resizeMode"] = resizeMode;
  }
    
  if (renderMode != oldProps->renderMode) {
    result["renderMode"] = renderMode;
  }
    
  if (sourceName != oldProps->sourceName) {
    result["sourceName"] = sourceName;
  }
    
  if (sourceJson != oldProps->sourceJson) {
    result["sourceJson"] = sourceJson;
  }
    
  if (sourceURL != oldProps->sourceURL) {
    result["sourceURL"] = sourceURL;
  }
    
  if (sourceDotLottieURI != oldProps->sourceDotLottieURI) {
    result["sourceDotLottieURI"] = sourceDotLottieURI;
  }
    
  if (imageAssetsFolder != oldProps->imageAssetsFolder) {
    result["imageAssetsFolder"] = imageAssetsFolder;
  }
    
  if ((progress != oldProps->progress) && !(std::isnan(progress) && std::isnan(oldProps->progress))) {
    result["progress"] = progress;
  }
    
  if ((speed != oldProps->speed) && !(std::isnan(speed) && std::isnan(oldProps->speed))) {
    result["speed"] = speed;
  }
    
  if (loop != oldProps->loop) {
    result["loop"] = loop;
  }
    
  if (autoPlay != oldProps->autoPlay) {
    result["autoPlay"] = autoPlay;
  }
    
  if (enableMergePathsAndroidForKitKatAndAbove != oldProps->enableMergePathsAndroidForKitKatAndAbove) {
    result["enableMergePathsAndroidForKitKatAndAbove"] = enableMergePathsAndroidForKitKatAndAbove;
  }
    
  if (enableSafeModeAndroid != oldProps->enableSafeModeAndroid) {
    result["enableSafeModeAndroid"] = enableSafeModeAndroid;
  }
    
  if (hardwareAccelerationAndroid != oldProps->hardwareAccelerationAndroid) {
    result["hardwareAccelerationAndroid"] = hardwareAccelerationAndroid;
  }
    
  if (cacheComposition != oldProps->cacheComposition) {
    result["cacheComposition"] = cacheComposition;
  }
    
  if (colorFilters != oldProps->colorFilters) {
    result["colorFilters"] = toDynamic(colorFilters);
  }
    
  if (dummy != oldProps->dummy) {
    result["dummy"] = toDynamic(dummy);
  }
    
  if (textFiltersAndroid != oldProps->textFiltersAndroid) {
    result["textFiltersAndroid"] = toDynamic(textFiltersAndroid);
  }
    
  if (textFiltersIOS != oldProps->textFiltersIOS) {
    result["textFiltersIOS"] = toDynamic(textFiltersIOS);
  }
  return result;
}
#endif

} // namespace facebook::react
